/**********************************************
 * Please DO NOT MODIFY the format of this file
 **********************************************/

/*************************
 * Team Info & Time spent
 *************************/

	Name1: Nick Balkissoon 	
	NetId1: ngb5	 	
	Time spent: 10 hours 

	Name2: Ari Jain
	NetId2: aj148
	Time spent: 10 hours	 

	Name3: Ethan Gottlieb
	NetId3: eig4
	Time spent: 10 hours

/******************
 * Files to submit
 ******************/

	dmm.c 	// Header file is not necessary
	README	// This file filled with the lab implementation details

/************************
 * Implementation details
 *************************/


 In implementing our heap manager, we made a few key design decisions.  Most importantly,
 we decided to use a blocklist instead of a freelist.  In this implementation, our 
 blocklist contains ALL blocks in our heap, both free and allocated.  Therefore, our 
 metadata structure contains and additional characteristic "free" which denotes whether 
 or not a specific block is free or allocated.  Thus, we are able to traverse our doubly linked 
 list of blocks and determine whether or not a block is free.

 We thought that in terms of ease of implementation and coalescing, this design had major
 advantages.  First and foremost, in order to free or allocate a block, all we need to do
 is change the metadata's "free" characteristics to true or false respectively... no need 
 to remove it from the linked list.  In terms of coalescing, everytime we free a block all
 we need to do is look at the previous block and the next block, and if one of them is "free"
 coalesce the blocks together.  Since we are "keeping track" of all of these blocks in address 
 sorted order, we KNOW that an adjacent block in our blocklist is also adjacent in memory... 
 whereas with a free list that just contains free blocks, you would need to compare memory 
 addresses to determine whether or not two blocks are adjacent in memory and thus could be 
 coalesced.  Adjacency is IMPLIED by the structure of our blocklist.  

 However, the main downside of this implementation is that the time required for a malloc is
 O(#of_blocks) as opposed to O(#of_free_blocks).  However, this efficiency degredation is not 
 huge and therefore a tolerable downside of our implementation (Our success efficiency is around 
 82%.).  Another potential downside is the space requirement for our blocklist.  Since we are 
 keeping track of all of our blocks, our blocklist can get quite large... however it is important 
 to remember that this is not a space issue because our data structure takes up no EXTRA space as 
 it is implemented WITHIN the heap and is being used by the programs.

 One drawback in this specific heap manager implementation (and any heap manager implementation
 that I could think of for that matter) is that we lose memory... imagine the scenario in which
 we have 100 bytes that we want to allocate with a 32 byte header.  Say we have a free-block of
 size 130 bytes.  Therefore we can allocate 100 bytes within this block, leaving 30 bytes 
 remaining... 30 bytes is not quite big enough to contain a header, so therefore that 30 bytes 
 of memory is unfortunately LOST.  Our implementation is not able to handle memory loss in this 
 way.

 Coalescing:  As mentioned before, our coalescing code is made very efficient by our metadata 
 and blocklist implementation.  Coalescing and freeing are O(1) processes with our implementation. 
 Every time we free a block, we look at that block's previous and next, and if either one is ALSO free
 (and adjecency in memory is implied because of our blocklist implementation), then we coalesce 
 the blocks together (i.e. combining block sizes/removing a metadata header, changing blocklist 
 pointers to point to the preceding header, changing that header's metadata).

 All of the testcases pass. For testcase2 we increase the heapsize to 4MBs.



/************************
 * Feedback on the lab
 ************************/

I greatly appreciated this lab.  I thought it was an excellent refresher on C and using pointers.
I now feel comfortable using C and using pointers going forward.  In addition to C, this was a 
nice refresher on memory and forced us to understand the heap and the stack.  My only qualms with 
this project were the tediousness of fixing small pointer bugs and the way to use the testcases 
was unclear. How were we supposed to know to increase the heap size for testcase2? What does 
"make test" REALLY do?  I wish we knew a bit more about running and testing this code before we 
started.

/************************
 * References
 ************************/

We worked with Dr. Cox in helping to debug our code on Thursday, Jan 22.  Other than that, we 
recieved no outside help.
